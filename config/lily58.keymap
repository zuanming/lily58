/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Capsword {
            bindings = <&caps_word>;
            key-positions = <52 55>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        mt_tap: mt_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <199>;
        };

        mt_hold_while_undecided: mt_hold_while_undecided {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD_WHILE_UNDECIDED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
            hold-trigger-on-release;
        };

        lt_bal: lt_bal {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BAL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        oneshot: oneshot {
            compatible = "zmk,behavior-sticky-key";
            label = "os";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        layer_oneshot: lo {
            compatible = "zmk,behavior-hold-tap";
            label = "lo";
            bindings = <&mo>, <&oneshot>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            hold-while-undecided;
        };

        scl: shift_caps_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_LAYER";
            #binding-cells = <0>;
            bindings = <&layer_oneshot 0 LEFT_SHIFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp GRAVE   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp LC(LA(DELETE))  &kp C_AC_SEARCH   &kp LC(LS(F23))                                      &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT     &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOL_UP
&kp TAB     &kp Q                 &kp W                 &kp E               &kp R             &kp T                                                &kp Y            &kp U             &kp I          &kp O       &kp P              &kp MINUS
&caps_word  &kp A                 &kp S                 &kp D               &kp F             &kp G                                                &kp H            &kp J             &kp K          &kp L       &kp SEMI           &kp SQT
&kp LSHFT   &kp Z                 &kp X                 &kp C               &kp V             &kp B                        &kp C_MUTE    &kp RBKT  &kp N            &kp M             &kp COMMA      &kp DOT     &kp FSLH           &kp RSHFT
                                                        &kp LEFT_GUI        &kp LEFT_CONTROL  &layer_oneshot 2 LEFT_SHIFT  &kp SPACE     &kp RET   &lt 1 BACKSPACE  &kp DELETE        &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp KC_VOLUME_UP KC_VOLUME_DOWN>;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans    &trans     &trans    &trans     &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans    &kp PG_UP  &kp UP    &kp PG_DN  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp HOME  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans     &trans    &trans     &trans   &trans
                        &trans  &trans  &trans  &trans    &trans  &trans    &trans     &trans
            >;

            label = "Nav";
        };

        sym {
            bindings = <
&trans  &trans         &trans         &trans         &trans        &trans                    &trans        &trans   &trans     &trans  &trans        &trans
&trans  &kp LS(EXCL)   &kp LS(AT)     &kp LS(POUND)  &kp LS(DLLR)  &trans                    &kp LS(STAR)  &kp N7   &kp N8     &kp N9  &kp LS(PLUS)  &trans
&trans  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &trans                    &kp FSLH      &kp N4   &kp N5     &kp N6  &kp MINUS     &trans
&trans  &kp LS(LPAR)   &kp LS(RPAR)   &kp LBKT       &kp RBKT      &trans  &trans    &trans  &kp COMMA     &kp N1   &kp N2     &kp N3  &kp EQUAL     &trans
                                      &trans         &trans        &trans  &trans    &trans  &kp N0        &kp DOT  &kp EQUAL
            >;

            label = "Sym";
        };
    };
};
